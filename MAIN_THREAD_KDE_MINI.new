#!/bin/bash

#main thread minified overview
#it stayed as large for 2 reasons so far
#to provide support for legacy devices
#but delta 3 and newer cellular devices are best
#to provide a bash programming reference
#but a new reference needs to be created

#main thread minified main improvements
#no initial startup routine
#simplified support for usb ethernet devices only
#initial signal scraping code

#main thread minified extra improvement - no root
#now programs like dhclient are called by user
#accomplished by configuring sudo
#instead of no password for sudo like before
#now there is just no password for dhclient
#sudoers configuration is as follows
#User_Alias DHCPUSERS = pi
#Cmnd_Alias DHCP = /sbin/dhclient
#DHCPUSERS ALL = NOPASSWD: DHCP
#now the same must be done for ifconfig also
#now the same must be done for route also
#these utilities may be used but not called
#this is because they are still not in PATH
#one way to deal with this is use absolutes
#so /sbin/route and on and on
#ifconfig/route do not need root to view
#so now no sudo needed with these at all

NETWORK_COUNTER=0
APPLICATION_COUNTER=0
TRAY_COUNTER=0

#determine WAN port
#be sure to disable long network device names
WAN=ppp0
WAN_CHECK_1=$(/sbin/ifconfig -a | grep wwan0 | wc -l)
if [ $WAN_CHECK_1 -gt 0 ]
then
WAN=wwan0
fi
WAN_CHECK_2=$(/sbin/ifconfig -a | grep usb0 | wc -l)
if [ $WAN_CHECK_2 -gt 0 ]
then
WAN=usb0
fi
if [ $WAN_CHECK_1 -lt 1 ] && [ $WAN_CHECK_2 -lt 1 ]
then
kdialog --passivepopup "No Compatible Cellular Devices Found" 1
echo "No Compatible Cellular Devices Found"
exit
fi

#moved to /etc/rc.local
#set power by limiter instead of governor which is less consistent and exact
#sudo sh -c "echo '5000000' >> /sys/devices/virtual/powercap/intel-rapl/intel-rapl:0/constraint_0_power_limit_uw"

URT=`kdialog --progressbar "Network Startup" 3`
sleep 1
#sudo timeout 10s dhclient $WAN
timeout 25s sudo dhclient $WAN
qdbus $URT Set "" value 1

qdbus $URT setLabelText "Tray Indicator Startup"
#reset the signal indicator
echo 0 > /home/pi/SIGNAL_READOUT
#start up the signal indicator helper
#use python3 now because python-gobject is gone
python3 /home/pi/SIGNAL_ICON.py&
#start up the notification indicator helper
python3 /home/pi/NOTIFICATION_ICON.py&
#reset the battery indicator high to prevent shutdown
echo 9 > /home/pi/SIGNAL_READOUT
#start up the battery indicator helper
python3 /home/pi/BATTERY_ICON.py&
qdbus $URT Set "" value 2

qdbus $URT setLabelText "Application Startup"
sleep 1
#kdesudo modem-manager-gui&
#kopete&
#pidgin&
linphone&
claws-mail&
qdbus $URT Set "" value 3

#auto close progress dialog
#weird behavior here with kdialog and killall
sleep 1
killall kdialog
killall kdialog_progres

while true
do

#simple network diagnostics for USB ethernet
if [ "$NETWORK_COUNTER" -gt 180 ]
then
NETWORK_COUNTER=0
CONNECTION_CHECK=$(/sbin/ifconfig -a | grep -w inet | wc -l)
if [ $CONNECTION_CHECK -lt 2 ]
then
kdialog --passivepopup "Restarting USB Ethernet-based connection / Reason: Lack of IP (Check USB Connection)" 1
#was hanging script due to no root initiative
#not good for security to let users do this
#unsure implications - may effect reliability
#sudo killall dhclient
#sudo timeout 25s dhclient $WAN
timeout 25s sudo dhclient $WAN
fi
CARRIER_CHECK=$(timeout 7 /sbin/route | grep default | wc -l)
if [ $CARRIER_CHECK -lt 1 ]
then
kdialog --passivepopup "Restarting USB Ethernet-based connection / Reason: Lack of Carrier (Check Cell Signal)" 1
#same problem as above here
#sudo killall dhclient
#sudo timeout 25s dhclient $WAN
timeout 25s sudo dhclient $WAN
fi
fi

#keep applications running no matter what
if [ "$APPLICATION_COUNTER" -gt 300 ]
then
APPLICATION_COUNTER=0
if ! ps -C linphone
then
kdialog --passivepopup "Phone died - restarting" 1
linphone&
fi
if ! ps -C claws-mail
then
kdialog --passivepopup "Email died - restarting" 1
#zenity --notification --window-icon="info" --text "Email died - restarting"&
claws-mail&
fi
if ! ps -C easystroke
then
kdialog --passivepopup "Gestures died - restarting" 1
easystroke&
fi
fi

if [ "$TRAY_COUNTER" -gt 30 ]
then
TRAY_COUNTER=0
#RESULTANT_1=`mmcli -m $MODEM_NUMBER | grep signal | cut -d"%" -f1 | cut -d":" -f2 | cut -d" " -f2`
#reverse engineering the signal bars
#308 = 4 bars = 0px -308
#231 - 3 bars
#154 - 2 bars
#77 - 1 bar
#wget -E -p -H -K -k 192.168.1.1/index.html
#wget -E -p -H -K -k 192.168.1.1/css/main.css
#found in left falkon debugger window
#span class with glyphicon-single as image
#first of all single and singal are typos
#these typos really mean signal
#second the glyphicon-image has multiple icons
#the html/css/javascript uses a viewport model
#viewport looks only at certain icon in image
#this is done by first specifying image size
#then background-position is used for position
#this allows focusing on just one icon/glyph
#in practice this is in different data struct
#the debugger is showing preprocessed data
#the post processed data is in css/main.css
#css has .item-connection .glyphicon-referesh
#yes this line contains another typo
#this struct has a background-position field
#this can be interpreted to mean signal bars
#backgrounds correspond to different bars
#decide how many signal bars to signal for - icon 1
RESULTANT_1=$(wget -O- 192.168.1.1/css/main.css | grep background)
BAR_4_CHECK=$(echo $RESULTANT_1 | grep 308 | wc -l)
if [ $BAR_4_CHECK -gt 0 ]
then
echo "4 Signal Bars"
echo 4 > /home/pi/SIGNAL_READOUT
fi
BAR_3_CHECK=$(echo $RESULTANT_1 | grep 231 | wc -l)
if [ $BAR_3_CHECK -gt 0 ]
then
echo "3 Signal Bars"
echo 3 > /home/pi/SIGNAL_READOUT
fi
BAR_2_CHECK=$(echo $RESULTANT_1 | grep 154 | wc -l)
if [ $BAR_2_CHECK -gt 0 ]
then
echo "2 Signal Bars"
echo 2 > /home/pi/SIGNAL_READOUT
fi
BAR_1_CHECK=$(echo $RESULTANT_1 | grep 77 | wc -l)
if [ $BAR_1_CHECK -gt 0 ]
then
echo "1 Signal Bar"
echo 1 > /home/pi/SIGNAL_READOUT
fi
#this is the former area for sms checking
#would have been based on resultant 2 variable
#read linphone history for missed calls
#alternate - show more call detail but less number of calls
#RESULTANT_3=`cat /home/pi/.linphonerc | grep -A1 status=2 | grep from`
#RESULTANT_3=`cat /home/pi/.linphonerc | grep -A1 status=2 | grep from | cut -d ":" -f2 | cut -c1-10`
RESULTANT_3=`cat /home/pi/.linphonerc | grep -A1 status=2 | grep from | cut -d ":" -f2 | cut -c1-10 | wc -l`
if [ "$RESULTANT_3" -gt 0 ]
then
echo "Missed Call"
#play a fairly unobtrusive sound
#run in background to stop hangups when there are problems with sound
#aplay /usr/share/sounds/pop.wav&
aplay /usr/share/games/pinball/tux/up.wav&
#signal for indicator
echo 2 > /home/pi/NOTIFICATION_READOUT
fi
#reset signal for indicator
if [ "$RESULTANT_2" -eq 0 ] && [ "$RESULTANT_3" -eq 0 ]
then
echo 0 > /home/pi/NOTIFICATION_READOUT
fi
#manage and display status of battery system - icon 3
RAW_VOLTAGE=$(cat /sys/class/saradc/saradc_ch0)
#~3.22v - hopefully enough to avoid built in battery protection shutdown
#suppress some errors
if [ "$RAW_VOLTAGE" -lt 785 ] 2>/dev/null
then
echo 0 > /home/pi/BATTERY_READOUT
#good place for automatic shutdown in case of low battery
kdialog --passivepopup "Battery level critical - shutdown in 30 seconds - save all work!" 1
sleep 30
#sudo shutdown -h now
fi
if [ "$RAW_VOLTAGE" -ge 785 ] 2>/dev/null
then
echo 1 > /home/pi/BATTERY_READOUT
fi
if [ "$RAW_VOLTAGE" -gt 825 ] 2>/dev/null
then
echo 2 > /home/pi/BATTERY_READOUT
fi
if [ "$RAW_VOLTAGE" -gt 850 ] 2>/dev/null
then
echo 3 > /home/pi/BATTERY_READOUT
fi
if [ "$RAW_VOLTAGE" -gt 875 ] 2>/dev/null
then
echo 4 > /home/pi/BATTERY_READOUT
fi
if [ "$RAW_VOLTAGE" -gt 900 ] 2>/dev/null
then
echo 5 > /home/pi/BATTERY_READOUT
fi
if [ "$RAW_VOLTAGE" -gt 925 ] 2>/dev/null
then
echo 6 > /home/pi/BATTERY_READOUT
fi
if [ "$RAW_VOLTAGE" -gt 950 ] 2>/dev/null
then
echo 7 > /home/pi/BATTERY_READOUT
fi
if [ "$RAW_VOLTAGE" -gt 975 ] 2>/dev/null
then
echo 8 > /home/pi/BATTERY_READOUT
fi
if [ "$RAW_VOLTAGE" -gt 1000 ] 2>/dev/null
then
echo 9 > /home/pi/BATTERY_READOUT
fi
fi

NETWORK_COUNTER=$(($NETWORK_COUNTER+1))
APPLICATION_COUNTER=$(($APPLICATION_COUNTER+1))
TRAY_COUNTER=$(($TRAY_COUNTER+1))
sleep 1

done

